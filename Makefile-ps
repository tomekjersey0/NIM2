# Define compiler and flags
CXX := g++
CXXFLAGS := -Iinclude -Ienums
LDFLAGS := -lpdcurses
DEB_LDFLAGS := -Lbin/Debug
REL_LDFLAGS := -Llib

# Define source files and output directories
SRC := $(wildcard src/*.cpp)
OBJ_DEBUG := $(patsubst src/%.cpp, obj/Debug/%.o, $(SRC))
OBJ_RELEASE := $(patsubst src/%.cpp, obj/Release/%.o, $(SRC))
DEBUG_DIR := bin/Debug
RELEASE_DIR := bin/Release
OBJ_DIR_DEBUG := obj/Debug
OBJ_DIR_RELEASE := obj/Release

# Ensure shell knows what g++ is
# TODO: Make these shenanigans possible
# TODO: For now, user must run:
# ! $env:Path += ";C:\MinGW\bin"
# TODO: Every time they start a new shell to compile
pre:
	@powershell -NoProfile -ExecutionPolicy Bypass -Command \
	"if (-not (Get-Command g++ -ErrorAction SilentlyContinue)) { \
		Write-Host 'g++ is not in your PATH. Try running:'; \
		Write-Host '$$env:Path += \";C:\MinGW\bin\"' \
	}"




# Define targets
all: clean build run

release: pre $(RELEASE_DIR)/NimGame

build: pre $(DEBUG_DIR)/NimGame

# Ensure obj directories exist
$(OBJ_DIR_DEBUG) $(OBJ_DIR_RELEASE):
	@mkdir -p $@

# Compile Debug Objects
$(OBJ_DIR_DEBUG)/%.o: src/%.cpp | $(OBJ_DIR_DEBUG)
	$(CXX) $(CXXFLAGS) -g -O0 -DDEBUG -c $< -o $@

# Compile Release Objects
$(OBJ_DIR_RELEASE)/%.o: src/%.cpp | $(OBJ_DIR_RELEASE)
	$(CXX) $(CXXFLAGS) -O2 -DNDEBUG -c $< -o $@

# Link Debug Executable
$(DEBUG_DIR)/NimGame: $(OBJ_DEBUG)
	$(CXX) $^ -o $@ $(LDFLAGS) $(DEB_LDFLAGS)

# Link Release Executable (Static)
$(RELEASE_DIR)/NimGame: $(OBJ_RELEASE)
	$(CXX) $^ -o $@ $(LDFLAGS) $(REL_LDFLAGS) -static -static-libstdc++ -static-libgcc

# Run Debug
run: pre $(DEBUG_DIR)/NimGame
	@echo "Running Debug version"
	./$(DEBUG_DIR)/NimGame

# Clean
clean:
	@echo "Cleaning up"
# PowerShell command to remove files, suppress errors if files do not exist
	powershell -command "Get-ChildItem obj/Debug/*.o, obj/Release/*.o | Remove-Item -Force -ErrorAction SilentlyContinue; Remove-Item -Force bin/Debug/NimGame, bin/Release/NimGame -ErrorAction SilentlyContinue; exit 0"
